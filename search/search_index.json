{"config":{"lang":["en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e00\u4e2a\u901a\u8fc7\u76d7\u642c\u522b\u4eba\u7f51\u7ad9\uff0c\u6280\u672f\u6587\u6863\u548c\u535a\u5ba2\u5185\u5bb9\uff0c\u6ca1\u6709\u81ea\u6211\u521b\u65b0\u7684\u5783\u573e\u56de\u6536\u7ad9\u3002","text":"<p>\u8bf7\u8fdc\u79bb</p>"},{"location":"about/","title":"\u5173\u4e8e\uff1a","text":"<p>\u4e00\u4e2a\u5c0f\u867e\u7c73</p>"},{"location":"blog/","title":"\u597d\u7684\u7f51\u5740\u6536\u85cf\uff1a","text":"<p>123213</p>"},{"location":"blog/duoyuantiaojian/","title":"\u591a\u5143\u6b63\u6001\u7684\u6761\u4ef6\u5206\u5e03","text":"<p>\u6c42\u591a\u5143\u6b63\u6001\u7684\u6761\u4ef6\u5206\u5e03\\(X = (X_{(1)},X_{(2)})\\)\u5728\u7ed9\u5b9a\\(X_{(2)}\\)\u7684\u6761\u4ef6\u4e0b\uff1a</p> \\[ \\binom{X_{(1)}}{X_{(2)}} \\sim N_{p} (\\binom{\\mu_{(1)}}{\\mu_{(2)}},\\binom{\\Sigma_{11} \\ \\Sigma_{12}}{\\Sigma_{21} \\ \\Sigma_{22}} ) \\] <p>\\(X_{(2)} \\sim  N_{p2}(\\mu_{(2)},\\Sigma_{(2)})\\)</p> <p>\\(X_{(1)} | X_{(2)} \\sim N_{p1}(\\mu_{(1)|(2)}, \\Sigma_{(1)|(2)})\\)</p> <p>\u6709:</p> <p>\\(\\mu_{(1)|(2)} = \\mu_{(1)} + \\Sigma_{12}{\\Sigma_{22}}^{-1} (x_{(2)} - \\mu_{(2)})\\)</p> <p>$\\Sigma_{(1)|(2)} = \\Sigma_{11}-\\Sigma_{12}\\Sigma_{22}^{-1}\\Sigma_{21}) $</p> <p>\u8bc1\u660e\uff1a</p> <p>\u5148\u5bf9\u77e9\u9635\\(\\Sigma\\)\u505a\u5982\u4e0b\u521d\u7b49\u53d8\u6362:(\u6d88\u53bb\u975e\u5bf9\u89d2\u5143\u7d20)</p> \\[ \\begin{pmatrix}     I &amp;  \\\\     -\\Sigma_{21}\\Sigma_{11}^{-1} &amp; I  \\end{pmatrix} \\begin{pmatrix}     \\Sigma_{11} &amp; \\Sigma_{12} \\\\     \\Sigma_{21} &amp; \\Sigma_{22} \\end{pmatrix} \\begin{pmatrix}     I &amp; -\\Sigma_{11}^{-1}\\Sigma_{12}\\\\      &amp; I \\end{pmatrix} =  \\begin{pmatrix}     \\Sigma_{11} &amp;  \\\\      &amp; \\Sigma_{22\\cdot 1} \\end{pmatrix} \\] <p>\u6c42\u9006\u53ef\u5f97:</p> \\[ \\Sigma^{-1} =  \\begin{pmatrix}     I &amp; -\\Sigma_{11}^{-1}\\Sigma_{12} \\\\      &amp; I  \\end{pmatrix} \\begin{pmatrix}     \\Sigma_{11}^{-1} &amp;  \\\\      &amp; \\Sigma_{22\\cdot 1}^{-1} \\end{pmatrix} \\begin{pmatrix}     I &amp; \\\\     -\\Sigma_{21}\\Sigma_{11}^{-1} &amp; I \\end{pmatrix} \\\\ =  \\begin{pmatrix}     \\Sigma_{11}^{-1} &amp;  \\\\      &amp; 0 \\end{pmatrix} +   \\begin{pmatrix}    -\\Sigma_{11}^{-1}\\Sigma_{12}  \\\\      I \\end{pmatrix} \\Sigma_{22\\cdot 1}^{-1}  \\begin{pmatrix}    -\\Sigma_{21}\\Sigma_{11}^{-1}  &amp; I \\end{pmatrix} \\] <p>\u6216</p> \\[ \\Sigma^{-1}=\\begin{bmatrix}I\\\\-\\Sigma_{22}^{-1}\\Sigma_{21}\\end{bmatrix}\\Sigma_{11\\cdot2}\\begin{bmatrix}I&amp;-\\Sigma_{12}\\Sigma_{22}^{-1}\\end{bmatrix}+\\begin{bmatrix}0\\\\&amp;-\\Sigma_{22}^{-1}\\end{bmatrix} \\] <p>\u5176\u4e2d\uff1a</p> <p>\\(\\Sigma_{22\\cdot1} = \\Sigma_{22} - \\Sigma_{21}\\Sigma_{11}^{-1}\\Sigma_{12}\\)</p> <p>\\(\\Sigma_{11\\cdot2} = \\Sigma_{11} - \\Sigma_{12}\\Sigma_{22}^{-1}\\Sigma_{21}\\)</p> <p>\u7531\u4e8e\u591a\u5143\u6b63\u6001\u5206\u5e03\u6709\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff1a</p> \\[ f(\\mathbf{x} | \\boldsymbol{\\mu}, \\boldsymbol{\\Sigma}) = \\frac{1}{(2\\pi)^{k/2} |\\boldsymbol{\\Sigma}|^{1/2}} \\exp\\left( -\\frac{1}{2} (\\mathbf{x} - \\boldsymbol{\\mu})^T \\boldsymbol{\\Sigma}^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}) \\right) \\] <p>\u5bf9\u4e8e\u5176\u4e2d\u7684 \\((\\mathbf{x} - \\boldsymbol{\\mu})^T \\boldsymbol{\\Sigma}^{-1} (\\mathbf{x} - \\boldsymbol{\\mu})\\)\u90e8\u5206\uff0c\u6211\u4eec\u6709\uff1a</p> \\[ \\begin{aligned}&amp;(x-\\mu)^T\\Sigma^{-1}(x-\\mu)=[ (x_{(1)}-\\mu_{(1)})^T\\quad(x_{(2)}-\\mu_{(2)})^T ] \\Sigma^{-1}\\begin{bmatrix}x_{(1)}-\\mu_{(1)}\\\\x_{(2)}-\\mu_{(2)}\\end{bmatrix}\\\\&amp;=(x_{(1)}-\\mu_{(1)})^T\\Sigma_{11}^{-1}(x_{(1)}-\\mu_{(1)})\\\\&amp;+[x_{(2)}-\\mu_{(2)}-\\Sigma_{21}\\Sigma_{11}^{-1}(x_{(1)}-\\mu_{(1)})]^T\\Sigma_{22\\cdot1}^{-1}[x_{(2)}-\\mu_{(2)}-\\Sigma_{21}\\Sigma_{11}^{-1}(x_{(1)}-\\mu_{(1)})]^T\\end{aligned} \\] <p>\u6216</p> \\[ \\begin{aligned}&amp;(x-\\mu)^T\\Sigma^{-1}(x-\\mu)=(x_{(2)}-\\mu_{(2)})^T\\Sigma_{22}^{-1}(x_{(2)}-\\mu_{(2)})\\\\&amp;+[x_{(1)}-\\mu_{(1)}-\\Sigma_{12}\\Sigma_{22}^{-1}(x_{(2)}-\\mu_{(2)})]^T\\Sigma_{11\\cdot2}^{-1}[x_{(1)}-\\mu_{(1)}-\\Sigma_{12}\\Sigma_{22}^{-1}(x_{(2)}-\\mu_{(2)})]^T\\end{aligned} \\] <p>\u7b2c\u4e8c\u9879\u8fd9\u91cc\u8fd9\u4e2a\u91cf\u6697\u542b\u7740\u4e00\u4e2a\u6761\u4ef6\u5206\u5e03\u3002</p> <p>\u5f97\u8bc1</p>"},{"location":"code/","title":"\u4ee3\u7801","text":"<p>\u8bb8\u591a\u4ee3\u7801\u5728\u5b66\u4e60\u548c\u5de5\u4f5c\u4e2d\u7ecf\u5e38\u4f7f\u7528\uff0c\u5c06\u5b83\u4eec\u8bb0\u5f55\u5e76\u6574\u7406\u4e8e\u6b64\uff0c\u65b9\u4fbf\u67e5\u627e\u4e0e\u6e29\u4e60\u3002</p> <ul> <li> <p> Pandas \u6570\u636e\u6846</p> <p>\u8868\u683c\u6570\u636e\u7684\u589e\u5220\u67e5\u6539\u3001\u5206\u7ec4\u7edf\u8ba1\u3001\u591a\u91cd\u7d22\u5f15\u3001\u65e5\u671f\u683c\u5f0f\u7b49\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> NumPy \u6570\u7ec4</p> <p>\u5411\u91cf\u3001\u77e9\u9635\u7684\u521b\u5efa\u3001\u5207\u7247\u3001\u6392\u5e8f\u7b49\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> List \u5217\u8868</p> <p>\u5217\u8868\u7684\u7b5b\u9009\u3001\u6dfb\u52a0\u3001\u62fc\u63a5\u3001\u5c55\u5e73\u7b49\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> Loop \u5faa\u73af</p> <p>\u663e\u793a\u5faa\u73af\u8fdb\u5ea6\u6761\u3001\u9010\u5bf9\u5faa\u73af\u3001\u904d\u5386\u8def\u5f84\u7b49\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> Plot \u7ed8\u56fe</p> <p>\u5e38\u7528\u7684\u7ed8\u56fe\u4ee3\u7801\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> Print \u6253\u5370</p> <p>\u6574\u9f50\u5730\u6253\u5370\u3001\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u7b49\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> Machine Learning \u673a\u5668\u5b66\u4e60</p> <p>\u5e38\u7528\u7684\u673a\u5668\u5b66\u4e60\u4ee3\u7801\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> SQL \u6570\u636e\u5e93</p> <p>\u5e38\u7528\u7684 SQL \u4ee3\u7801\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> R \u8bed\u8a00</p> <p>\u5e38\u7528\u7684 R\u8bed\u8a00 \u4ee3\u7801\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> \u722c\u866b</p> <p>\u5229\u7528python\u548c\u6d4f\u89c8\u5668\u63d2\u4ef6\u8fdb\u884c\u7f51\u7edc\u722c\u866b\u7684\u5de5\u5177\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> Others \u5176\u4ed6</p> <p>\u5b57\u5178\u4e0e\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u3001Git \u547d\u4ee4\u3001Conda \u547d\u4ee4\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u7b49\u3002</p> <p> \u67e5\u770b</p> </li> <li> <p> Time Series \u65f6\u95f4\u5e8f\u5217</p> <p>\u8bb0\u5f55pandas\u5bf9\u65f6\u95f4\u5e8f\u5217\u7684\u64cd\u4f5c\u3002</p> <p> \u67e5\u770b </p> </li> </ul>"},{"location":"code/Hot100/","title":"Leetcode Hot100","text":""},{"location":"code/Hot100/#_1","title":"\u4e24\u6570\u4e4b\u548c","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c <code>target</code>  \u7684\u90a3 <code>\u4e24\u4e2a</code> \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4f7f\u7528\u4e24\u6b21\u76f8\u540c\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> twoSum.py<pre><code>class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        dic = {}\n        for i, num in enumerate(nums):\n            if target - num in dic:\n                return [dic[target - num], i]\n            dic[num] = i \n</code></pre>"},{"location":"code/Hot100/#_2","title":"\u4e24\u6570\u76f8\u52a0","text":"<p>\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002</p> <p>\u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002</p> twoSum.py<pre><code>class ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    # l1 \u548c l2 \u4e3a\u5f53\u524d\u904d\u5386\u7684\u94fe\u8868\u8282\u70b9\uff0ccarry \u4e3a\u8fdb\u4f4d\uff0c\u9ed8\u8ba4\u4e3a 0\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode, carry=0):\n        # \u68c0\u67e5\u9012\u5f52\u8fb9\u754c\uff1a\u5f53 l1 \u548c l2 \u90fd\u4e3a\u7a7a\u65f6\n        if l1 is None and l2 is None:\n            # \u5982\u679c\u8fd8\u6709\u8fdb\u4f4d\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\u5b58\u50a8\u8fdb\u4f4d\u503c\uff1b\u5426\u5219\u8fd4\u56de None\n            return ListNode(carry) if carry else None\n\n        # \u5982\u679c l1 \u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\uff0c\u8bf4\u660e l1 \u5df2\u7ecf\u904d\u5386\u5b8c\uff0c\u76f4\u63a5\u5c06 l1 \u548c l2 \u4ea4\u6362\n        if l1 is None:\n            l1, l2 = l2, l1  # \u786e\u4fdd l1 \u4e0d\u4e3a\u7a7a\uff0c\u7b80\u5316\u540e\u7eed\u4ee3\u7801\n\n        # \u5c06\u5f53\u524d\u8282\u70b9\u503c\u548c l2 \u7684\u503c\uff08\u5982\u679c\u5b58\u5728\uff09\u4ee5\u53ca\u8fdb\u4f4d\u76f8\u52a0\n        carry += l1.val + (l2.val if l2 else 0)  # l2 \u4e3a\u7a7a\u65f6\u53d6 0\n\n        # \u66f4\u65b0 l1 \u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u4fdd\u7559\u4e2a\u4f4d\u6570\n        l1.val = carry % 10  # \u5f53\u524d\u8282\u70b9\u7684\u503c\u4e3a\u548c\u7684\u4e2a\u4f4d\u6570\n\n        # \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u540c\u65f6\u8ba1\u7b97\u65b0\u7684\u8fdb\u4f4d\n        l1.next = self.addTwoNumbers(l1.next, l2.next if l2 else None, carry // 10)  # \u8fdb\u4f4d\u4e3a\u6574\u9664 10 \u7684\u7ed3\u679c\n\n        # \u8fd4\u56de\u66f4\u65b0\u540e\u7684 l1 \u94fe\u8868\n        return l1\n</code></pre> <pre><code>l1 = [2,4,3]\nl2 = [5,6,4]\nb = ListNode\nl1 = b(2, b(4, b(3)))\nl2= b(5, b(6, b(4)))\na = Solution()\na.addTwoNumbers(l1, l2)\n</code></pre>"},{"location":"code/Hot100/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> lengthOfLongestSubstring.py<pre><code>def find_positions_without(s, cr):\n    if s == cr*len(s):\n        return -1\n    return [i for i, char in enumerate(s) if char == cr][-1]+1\nclass Solution(object):\n    # def find_positions_without(s, cr):\n    #     return [i for i, char in enumerate(s) if char != cr][0]\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 1\n        max_count = 0\n        start = 0\n        if len(s) &lt;= 1:\n            return len(s)\n        str = s[start]\n        for i in range(len(s)-1):\n            if s[i+1] not in str and i &lt; len(s)-2:\n                print(\"case 1:\",str,\"         \",s[i+1],i)\n                count += 1\n                str = s[start:i+2]\n            elif i == len(s)-2 and s[i+1] not in str:\n                count += 1\n                str = s[start:]\n                print(str)\n            else:\n                print(\"case 2:\",str,s[i+1])\n                result = find_positions_without(str, s[i+1])\n                if result == -1:\n                    start = i+1\n                    count = 1\n                else:\n                    count = len(str) - result + 1\n                    start = start + find_positions_without(str, s[i+1])                    \n                str = s[start:i+2]\n                #print(str,s[i+1],start)\n            max_count = max(max_count, count)\n        return max_count\n</code></pre> <pre><code>a = Solution()\na.lengthOfLongestSubstring(\"aabaab!bb\")\n</code></pre>"},{"location":"code/code/","title":"Code","text":"\\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the  singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such  that \\(f(a)=f(b)\\).</p>"},{"location":"code/loop/","title":"Loop \u5faa\u73af","text":""},{"location":"code/loop/#trangetqdm","title":"trange\u548ctqdm:","text":"<p>\u53c2\u8003\u7f51\u7ad9\uff1aPython \u8fdb\u5ea6\u6761 tqdm \u548c trange</p> <p><code>tqdm</code>\u662f\u4e00\u4e2a\u7528\u4e8e\u663e\u793a\u8fdb\u5ea6\u6761\u7684 Python \u5e93\uff0c\u5e38\u7528\u4e8e\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u5faa\u73af\u4e2d\u3002<code>trange</code> \u662f<code>tqdm</code> \u63d0\u4f9b\u7684\u4e00\u4e2a\u5feb\u6377\u51fd\u6570\uff0c\u7528\u4e8e\u751f\u6210\u5e26\u6709\u8fdb\u5ea6\u6761\u7684\u8303\u56f4\u5bf9\u8c61\u3002\u4ee5\u4e0b\u662f <code>tqdm</code>\u548c <code>trange</code> \u7684\u4ee3\u7801\u8303\u4f8b\uff1a</p> <pre><code>from tqdm import tqdm\n\nimport time\n\n# \u521b\u5efa\u4e00\u4e2a\u5217\u8868\n\na = [1, 2, 3]\n\n# \u4f7f\u7528 tqdm \u5305\u88c5\u5217\u8868\uff0c\u663e\u793a\u8fdb\u5ea6\u6761\n\nfor i in tqdm(a):\n\n  time.sleep(1)  # \u6a21\u62df\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\n\n  print(i)\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a <pre><code> 33%|\u2588\u2588\u2588\u258e      | 1/3 [00:01&lt;00:02,  1.01s/it]\n1\n 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 2/3 [00:02&lt;00:01,  1.01s/it]\n2\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03&lt;00:00,  1.01s/it]\n3\n</code></pre></p> <pre><code>from tqdm import trange\n\nimport time\n\n# \u4f7f\u7528 trange \u751f\u6210\u4e00\u4e2a\u5e26\u6709\u8fdb\u5ea6\u6761\u7684\u8303\u56f4\u5bf9\u8c61\n\nfor i in trange(3):\n\n  time.sleep(1)  # \u6a21\u62df\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\n\n  print(i)\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a <pre><code> 33%|\u2588\u2588\u2588\u258e      | 1/3 [00:01&lt;00:02,  1.00s/it]\n0\n 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 2/3 [00:02&lt;00:01,  1.01s/it]\n1\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03&lt;00:00,  1.01s/it]\n2\n</code></pre></p>"},{"location":"code/loop/#_1","title":"\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\u663e\u793a\u4fe1\u606f","text":"<p>\u901a\u8fc7<code>set_description</code>\u548c<code>set_postfix</code>\u65b9\u6cd5\u8bbe\u7f6e\u8fdb\u5ea6\u6761\u663e\u793a\u4fe1\u606f\uff1a</p> <pre><code>from tqdm import trange\n\nfrom random import random,randint\n\nimport time\n\n\n\nwith trange(10) as t:\n\n for i in t:\n\n  #\u8bbe\u7f6e\u8fdb\u5ea6\u6761\u5de6\u8fb9\u663e\u793a\u7684\u4fe1\u606f\n\n  t.set_description(\"GEN %i\"%i)\n\n  #\u8bbe\u7f6e\u8fdb\u5ea6\u6761\u53f3\u8fb9\u663e\u793a\u7684\u4fe1\u606f\n\n  t.set_postfix(loss=random(),gen=randint(1,999),str=\"h\",lst=[1,2])\n\n  time.sleep(0.1)\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a <code>GEN 9: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:01&lt;00:00,  9.12it/s, gen=58, loss=0.997, lst=[1, 2], str=h]</code></p>"},{"location":"code/loop/#python-set-set-intersection","title":"Python Set &amp; \u548c Set intersection() \u8fd0\u884c\u901f\u5ea6\u6bd4\u8f83","text":"Python Set &amp; \u548c Set intersection() \u8fd0\u884c\u901f\u5ea6\u6bd4\u8f83.py<pre><code>import random\nimport time\nimport numpy as np\n\n\ndef set_intersection(length=10000, interval=100000):\n  a = set(random.sample([i for i in range(interval)], length))\n  b = set(random.sample([i for i in range(interval)], length))\n  time_1, time_2 = [], [] \n  for i in range(10):\n    start_time = time.time()\n    set(a) &amp; set(b)\n    end_time = time.time()\n    time_1.append(end_time-start_time)\n    start_time_2 = time.time()\n    a.intersection(b)\n    end_time_2 = time.time()\n    time_2.append(end_time_2 - start_time_2)\n  print(np.mean(time_1))\n  print(np.mean(time_2))\n\n\na = set(random.sample([i for i in range(10000000)], 1000000))\nb = set(random.sample([i for i in range(10000000)], 1000000))\n\nset_intersection(1000000, 10000000)\nset_intersection(10000, 100000)\n</code></pre> <p>\u5bf9set\u6570\u636e\u7c7b\u578b\uff0c\u4f18\u5148\u9009\u62e9 .intersection()\u3002interseection()\u901f\u5ea6\u7ea6\u4e3a &amp; \u7684 3~5 \u500d\u3002</p> <p>\u8fd0\u884c\u7ed3\u679c: 0.25935113430023193 0.11506917476654052 0.002876615524291992 0.0009170770645141602</p>"},{"location":"code/numpy/","title":"NumPy \u6570\u7ec4","text":""},{"location":"code/numpy/#python-npwhere-index","title":"Python np.where(), .index() \u8fd0\u884c\u901f\u5ea6\u6bd4\u8f83","text":"<pre><code>import numpy as np\nimport time\nimport random\n\na = [i for i in range(99999)]\nb = random.sample(a, 10000)\na_arr = np.array(a)\narray_time = []\nindex_time = []\nfor i in range(10):\n  time_start = time.time()\n  [a.index(j) for j in b]\n  time_end = time.time()\n  time_run = time_end - time_start\n  index_time.append(time_run)\n  time_start = time.time()\n  [np.where(a_arr == j)[0][0] for j in b]\n  time_end = time.time()\n  time_run = time_end - time_start\n  array_time.append(time_run)\n\nprint(np.mean(array_time))\nprint(np.mean(index_time))\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a <pre><code>0.4020892381668091\n11.329256582260133\n</code></pre></p>"},{"location":"code/pachong/","title":"\u722c\u866b","text":"<p>\u7f51\u9875\u722c\u866b\u662f\u4e00\u79cd\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u7528\u4e8e\u4ece\u7f51\u7ad9\u4e0a\u63d0\u53d6\u6570\u636e\u3002\u5b83\u901a\u8fc7\u6a21\u62df\u6d4f\u89c8\u5668\u884c\u4e3a\uff0c\u8bbf\u95ee\u7f51\u9875\u5e76\u89e3\u6790\u5176\u5185\u5bb9\uff0c\u63d0\u53d6\u6240\u9700\u7684\u4fe1\u606f\u3002\u4ee5\u4e0b\u662f Web Scraper \u7684\u4e00\u4e9b\u5173\u952e\u6982\u5ff5\u548c\u7528\u9014\uff1a</p> <p>\u5173\u952e\u6982\u5ff5</p> <ul> <li>HTTP \u8bf7\u6c42\uff1a\u722c\u866b\u901a\u8fc7\u53d1\u9001 HTTP \u8bf7\u6c42\u6765\u8bbf\u95ee\u7f51\u9875\uff0c\u5e38\u7528\u7684\u8bf7\u6c42\u65b9\u6cd5\u5305\u62ec GET \u548c POST\u3002</li> <li>HTML \u89e3\u6790\uff1a\u722c\u866b\u83b7\u53d6\u7f51\u9875\u7684 HTML \u5185\u5bb9\u540e\uff0c\u9700\u8981\u89e3\u6790 HTML \u4ee5\u63d0\u53d6\u6240\u9700\u7684\u6570\u636e\u3002\u5e38\u7528\u7684\u89e3\u6790\u5e93\u6709 BeautifulSoup \u548c lxml\u3002</li> <li>\u6570\u636e\u63d0\u53d6\uff1a\u901a\u8fc7\u89e3\u6790 HTML\uff0c\u722c\u866b\u53ef\u4ee5\u63d0\u53d6\u7279\u5b9a\u7684\u5143\u7d20\uff0c\u5982\u6807\u9898\u3001\u94fe\u63a5\u3001\u56fe\u7247\u3001\u8868\u683c\u6570\u636e\u7b49\u3002</li> <li>\u6570\u636e\u5b58\u50a8\uff1a\u63d0\u53d6\u7684\u6570\u636e\u53ef\u4ee5\u5b58\u50a8\u5728\u5404\u79cd\u683c\u5f0f\u4e2d\uff0c\u5982 CSV\u3001JSON\u3001\u6570\u636e\u5e93\u7b49\u3002</li> </ul> <p>\u5e38\u89c1\u7528\u9014</p> <ul> <li> <p>\u6570\u636e\u6536\u96c6\uff1a\u4ece\u591a\u4e2a\u7f51\u7ad9\u6536\u96c6\u6570\u636e\uff0c\u7528\u4e8e\u5e02\u573a\u5206\u6790\u3001\u7ade\u4e89\u5bf9\u624b\u7814\u7a76\u7b49\u3002</p> </li> <li> <p>\u5185\u5bb9\u805a\u5408\uff1a\u4ece\u4e0d\u540c\u6765\u6e90\u6536\u96c6\u5185\u5bb9\uff0c\u6c47\u603b\u5230\u4e00\u4e2a\u5e73\u53f0\u4e0a\uff0c\u5982\u65b0\u95fb\u805a\u5408\u7f51\u7ad9\u3002</p> </li> <li>\u4ef7\u683c\u76d1\u63a7\uff1a\u76d1\u63a7\u7535\u5546\u7f51\u7ad9\u7684\u5546\u54c1\u4ef7\u683c\uff0c\u8fdb\u884c\u4ef7\u683c\u6bd4\u8f83\u548c\u8d8b\u52bf\u5206\u6790\u3002</li> <li>\u5b66\u672f\u7814\u7a76\uff1a\u6536\u96c6\u5b66\u672f\u6587\u7ae0\u3001\u7814\u7a76\u6570\u636e\u7b49\uff0c\u7528\u4e8e\u5b66\u672f\u7814\u7a76\u548c\u5206\u6790\u3002</li> </ul>"},{"location":"code/pachong/#web-scrapper","title":"Web Scrapper:\u6d4f\u89c8\u5668\u63d2\u4ef6","text":"<p>Web Scraper\u662f\u4e13\u95e8\u7528\u4e8e\u722c\u866b\u7684Chrome\u63d2\u4ef6\uff0c\u5b83\u901a\u8fc7\u6a21\u62df\u4eba\u624b\u52a8\u64cd\u4f5c\u6d4f\u89c8\u5668\u7684\u65b9\u5f0f\u6765\u62b5\u6297\u53cd\u722c\u866b\u673a\u5236\u3002\u5b83\u9002\u5408\u4e8e\u8f7b\u5ea6\u7684\u6570\u636e\u722c\u53d6\u9700\u6c42\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u9700\u8981\u9891\u7e41\u66f4\u65b0\u6570\u636e\u7684\u573a\u666f\u3002\u4f7f\u7528Web Scraper\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u6240\u8c13\u7684sitemap\uff0c\u5b83\u5b9a\u4e49\u4e86\u722c\u866b\u7684\u7ed3\u6784\u548c\u4f60\u60f3\u8981\u63d0\u53d6\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u6587\u672c\u3001\u94fe\u63a5\u3001\u56fe\u7247\u7b49\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u5c06\u7ed3\u679c\u5bfc\u51fa\u4e3a<code>CSV</code>\u3001<code>XLSX</code>\u6216<code>JSON</code>\u683c\u5f0f\u3002</p> <p>\u4f7f\u7528\u5b83\u65f6\u9700\u8981\u6309 <code>F12</code> \u6253\u5f00\u5f00\u53d1\u8005\u6a21\u5f0f\uff0c\u5728\u6700\u53f3\u4fa7\u627e\u5230\u201cWeb Scraper\u201d\u9009\u9879\u3002</p> <p>\u8be6\u7ec6\u7684\u5de5\u4f5c\u6d41\u7a0b\u53c2\u8003\u7f51\u7ad9\uff1a</p> <ul> <li> <p>Web Scraper \u5b98\u65b9\u793a\u4f8b\u2014\u2014\u722c\u53d6\u591a\u5143\u7d20</p> </li> <li> <p>Bilibili \u6559\u7a0b\u2014\u2014Web Scraper \u722c\u53d6\u6570\u636e\u6559\u7a0b\u3010\u4e0d\u7528\u5199\u4ee3\u7801\u7684\u722c\u866b\uff0c\u5feb\u901f\u83b7\u53d6\u6570\u636e\u3011</p> </li> <li> <p>YouTube \u6559\u7a0b\u2014\u2014\u7528\u722c\u866b\u5de5\u5177\u4ece\u7f51\u9875\u4e2d\u6252\u6570\u636e\u5e76\u5bfc\u5165 Excel \u8868\u683c</p> </li> </ul>"},{"location":"code/pandas/","title":"Pandas \u6570\u636e\u6846","text":""},{"location":"code/time_series/","title":"Time series","text":""},{"location":"code/time_series/#pivot_table","title":"pivot_table","text":"<p><code>pandas</code> \u5305\u4e2d\u7684 <code>pivot_table</code> \u51fd\u6570\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u548c\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u5728 DataFrame \u4e0a\u6267\u884c\u6570\u636e\u7684\u900f\u89c6\u548c\u6c47\u603b\u64cd\u4f5c\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u6570\u636e\u805a\u5408\u548c\u91cd\u5851\uff0c\u53ef\u4ee5\u6839\u636e\u6307\u5b9a\u7684\u884c\u548c\u5217\u8fdb\u884c\u6570\u636e\u7684\u5206\u7ec4\u3001\u6c47\u603b\uff0c\u5e76\u5e94\u7528\u805a\u5408\u51fd\u6570\uff08\u5982\u6c42\u548c\u3001\u5e73\u5747\u503c\u7b49\uff09\u3002</p>"},{"location":"code/time_series/#pivot_table_1","title":"<code>pivot_table</code> \u51fd\u6570\u7684\u4e3b\u8981\u7528\u9014","text":"<ul> <li>\u900f\u89c6\u8868\uff1a\u7c7b\u4f3c\u4e8e Excel \u4e2d\u7684\u900f\u89c6\u8868\uff0c<code>pivot_table</code> \u7528\u4e8e\u6839\u636e\u67d0\u4e9b\u7ef4\u5ea6\u8fdb\u884c\u6570\u636e\u7684\u5206\u7ec4\u3001\u805a\u5408\u548c\u91cd\u65b0\u6392\u5217\u3002</li> <li>\u6570\u636e\u805a\u5408\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u6c47\u603b\u64cd\u4f5c\uff0c\u5982\u6c42\u548c\u3001\u5e73\u5747\u3001\u8ba1\u6570\u7b49\u3002</li> </ul>"},{"location":"code/time_series/#_1","title":"\u57fa\u672c\u8bed\u6cd5","text":"<pre><code>pandas.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, margins_name='All', dropna=True, observed=False)\n</code></pre>"},{"location":"code/time_series/#_2","title":"\u4e3b\u8981\u53c2\u6570\u8bf4\u660e","text":"<ol> <li> <p>data\uff1a<code>DataFrame</code>\uff0c\u9700\u8981\u8fdb\u884c\u900f\u89c6\u64cd\u4f5c\u7684\u6570\u636e\u96c6\u3002</p> </li> <li> <p>values\uff1a\u6307\u5b9a\u9700\u8981\u6c47\u603b\u7684\u5217\uff0c\u901a\u5e38\u662f\u6570\u503c\u5217\u3002\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u540d\uff08<code>list</code>\uff09\u3002</p> </li> <li> <p>index\uff1a\u7528\u4e8e\u5206\u7ec4\u7684\u884c\u6807\u7b7e\uff08\u884c\u7d22\u5f15\uff09\u3002\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u540d\uff08<code>list</code>\uff09\u3002</p> </li> <li> <p>columns\uff1a\u7528\u4e8e\u5206\u7ec4\u7684\u5217\u6807\u7b7e\uff08\u5217\u7d22\u5f15\uff09\u3002\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u540d\uff08<code>list</code>\uff09\u3002</p> </li> <li> <p>aggfunc\uff1a\u6307\u5b9a\u7528\u4e8e\u6570\u636e\u805a\u5408\u7684\u51fd\u6570\uff0c\u9ed8\u8ba4\u662f <code>'mean'</code>\uff0c\u5373\u6c42\u5747\u503c\u3002\u53ef\u4ee5\u4f20\u5165\u5b57\u7b26\u4e32\u51fd\u6570\u540d\u79f0\uff08\u5982 <code>'sum'</code>\u3001<code>'count'</code> \u7b49\uff09\u6216\u8005\u51fd\u6570\uff08\u5982 <code>np.sum</code>\u3001<code>np.mean</code> \u7b49\uff09\u3002</p> </li> <li> <p>fill_value\uff1a\u5728\u7ed3\u679c\u4e2d\u7528\u6765\u66ff\u6362 <code>NaN</code> \u7684\u503c\uff0c\u901a\u5e38\u7528\u4e8e\u586b\u5145\u7f3a\u5931\u503c\u3002</p> </li> <li> <p>margins\uff1a\u5e03\u5c14\u503c\uff0c\u662f\u5426\u6dfb\u52a0\u884c\u548c\u5217\u7684\u6c47\u603b\u7edf\u8ba1\uff08\u7c7b\u4f3c\u4e8e Excel \u4e2d\u7684 \"\u603b\u8ba1\"\uff09\u3002</p> </li> <li> <p>margins_name\uff1a\u8bbe\u7f6e\u6c47\u603b\u7edf\u8ba1\u884c/\u5217\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a <code>'All'</code>\u3002</p> </li> <li> <p>dropna\uff1a\u662f\u5426\u4e22\u5f03\u542b\u6709 <code>NaN</code> \u503c\u7684\u5217\u3002</p> </li> <li> <p>observed\uff1a\u4ec5\u5728\u5206\u7ec4\u662f <code>Categorical</code> \u7c7b\u578b\u65f6\u6709\u7528\uff0c\u8868\u793a\u662f\u5426\u53ea\u663e\u793a\u5728\u6570\u636e\u4e2d\u89c2\u5bdf\u5230\u7684\u5206\u7c7b\u3002</p> </li> </ol>"},{"location":"code/time_series/#_3","title":"\u793a\u4f8b","text":"<p>\u5047\u8bbe\u6709\u4ee5\u4e0b\u6570\u636e\u96c6 <code>df</code>\uff1a</p> <pre><code>import pandas as pd\n\ndata = {\n    'Category': ['A', 'A', 'B', 'B', 'C', 'C'],\n    'Subcategory': ['X', 'Y', 'X', 'Y', 'X', 'Y'],\n    'Sales': [100, 150, 200, 250, 300, 350],\n    'Profit': [20, 30, 40, 50, 60, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>  Category Subcategory  Sales  Profit\n0        A           X    100      20\n1        A           Y    150      30\n2        B           X    200      40\n3        B           Y    250      50\n4        C           X    300      60\n5        C           Y    350      70\n</code></pre>"},{"location":"code/time_series/#1","title":"1. \u57fa\u672c\u4f7f\u7528","text":"<p>\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u900f\u89c6\u8868\uff0c\u6c47\u603b\u6bcf\u4e2a <code>Category</code> \u548c <code>Subcategory</code> \u7684\u9500\u552e\u603b\u989d\u3002</p> <pre><code>pivot = pd.pivot_table(df, values='Sales', index='Category', columns='Subcategory', aggfunc='sum')\nprint(pivot)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Subcategory     X      Y\nCategory               \nA             100    150\nB             200    250\nC             300    350\n</code></pre> <p>\u8fd9\u91cc\uff0c<code>Category</code> \u662f\u884c\u7d22\u5f15\uff0c<code>Subcategory</code> \u662f\u5217\u7d22\u5f15\uff0c<code>Sales</code> \u5217\u88ab\u6c47\u603b\u4e3a\u9500\u552e\u603b\u989d\u3002</p>"},{"location":"code/time_series/#2","title":"2. \u4f7f\u7528\u591a\u4e2a\u805a\u5408\u51fd\u6570","text":"<p>\u4f60\u53ef\u4ee5\u4e3a <code>aggfunc</code> \u53c2\u6570\u4f20\u5165\u591a\u4e2a\u805a\u5408\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u540c\u65f6\u8ba1\u7b97\u9500\u552e\u7684\u603b\u548c\u548c\u5747\u503c\uff1a</p> <pre><code>pivot = pd.pivot_table(df, values='Sales', index='Category', columns='Subcategory', aggfunc=['sum', 'mean'])\nprint(pivot)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>            sum         mean      \nSubcategory   X    Y       X      Y\nCategory                            \nA           100  150    100.0  150.0\nB           200  250    200.0  250.0\nC           300  350    300.0  350.0\n</code></pre> <p>\u73b0\u5728\u8868\u4e2d\u663e\u793a\u4e86\u6bcf\u4e2a <code>Category</code> \u548c <code>Subcategory</code> \u7684\u9500\u552e\u603b\u548c\u548c\u5747\u503c\u3002</p>"},{"location":"code/time_series/#3","title":"3. \u540c\u65f6\u805a\u5408\u591a\u4e2a\u5217","text":"<p>\u53ef\u4ee5\u5bf9 <code>Sales</code> \u548c <code>Profit</code> \u540c\u65f6\u8fdb\u884c\u805a\u5408\uff1a</p> <pre><code>pivot = pd.pivot_table(df, values=['Sales', 'Profit'], index='Category', aggfunc='sum')\nprint(pivot)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>          Profit  Sales\nCategory                \nA              50    250\nB              90    450\nC             130    650\n</code></pre> <p>\u8fd9\u91cc\uff0c<code>Sales</code> \u548c <code>Profit</code> \u4e24\u5217\u88ab\u5206\u522b\u6c47\u603b\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u7684\u603b\u548c\u3002</p>"},{"location":"code/time_series/#4-fill_value","title":"4. \u586b\u5145\u7f3a\u5931\u503c\uff08<code>fill_value</code> \u53c2\u6570\uff09","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u900f\u89c6\u8868\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0 <code>NaN</code> \u503c\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>fill_value</code> \u53c2\u6570\u6765\u586b\u5145\u8fd9\u4e9b\u7f3a\u5931\u503c\u3002\u4f8b\u5982\uff0c\u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a 0\uff1a</p> <pre><code>pivot = pd.pivot_table(df, values='Sales', index='Category', columns='Subcategory', aggfunc='sum', fill_value=0)\nprint(pivot)\n</code></pre>"},{"location":"code/time_series/#5-margins","title":"5. \u6dfb\u52a0\u603b\u8ba1\u884c/\u5217\uff08<code>margins</code> \u53c2\u6570\uff09","text":"<p>\u4f60\u53ef\u4ee5\u6dfb\u52a0\u603b\u8ba1\u884c\u548c\u5217\u6765\u663e\u793a\u5404\u7ec4\u7684\u6c47\u603b\u7edf\u8ba1\uff1a</p> <pre><code>pivot = pd.pivot_table(df, values='Sales', index='Category', columns='Subcategory', aggfunc='sum', margins=True, margins_name='Total')\nprint(pivot)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Subcategory     X      Y  Total\nCategory                         \nA             100    150    250\nB             200    250    450\nC             300    350    650\nTotal         600    750   1350\n</code></pre> <p><code>margins=True</code> \u4f1a\u6dfb\u52a0\u4e00\u884c\u548c\u4e00\u5217\u6765\u663e\u793a\u603b\u8ba1\u6c47\u603b\u503c\uff0c<code>margins_name</code> \u53c2\u6570\u7528\u4e8e\u81ea\u5b9a\u4e49\u603b\u8ba1\u884c\u7684\u540d\u79f0\u3002</p>"},{"location":"code/time_series/#_4","title":"\u603b\u7ed3","text":"<p><code>pivot_table</code> \u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u9002\u7528\u4e8e\u591a\u7ef4\u5ea6\u7684\u6570\u636e\u805a\u5408\u548c\u91cd\u5851\u3002\u5b83\u5141\u8bb8\u4f60\u6839\u636e\u884c\u548c\u5217\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528\u591a\u79cd\u805a\u5408\u51fd\u6570\u6765\u5904\u7406\u6570\u636e\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u652f\u6301\u586b\u5145\u7f3a\u5931\u503c\u3001\u6dfb\u52a0\u6c47\u603b\u884c\u548c\u5217\u7b49\u529f\u80fd\uff0c\u662f\u6570\u636e\u5206\u6790\u548c\u5904\u7406\u8fc7\u7a0b\u4e2d\u975e\u5e38\u5b9e\u7528\u7684\u5de5\u5177\u3002</p>"},{"location":"code/time_series/#rolling","title":"Rolling\u51fd\u6570\uff1a","text":"<p>\u5728 <code>pandas</code> \u5305\u4e2d\uff0c<code>rolling</code> \u51fd\u6570\u662f\u7528\u4e8e\u8fdb\u884c\u6eda\u52a8\u7a97\u53e3\u8ba1\u7b97\u7684\u5f3a\u5927\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u6216\u4efb\u4f55\u6309\u987a\u5e8f\u6392\u5217\u7684\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u5728\u6570\u636e\u4e0a\u8fdb\u884c\u79fb\u52a8\u7684\u7edf\u8ba1\u8fd0\u7b97\uff0c\u6bd4\u5982\u8ba1\u7b97\u79fb\u52a8\u5e73\u5747\u3001\u79fb\u52a8\u6807\u51c6\u5dee\u3001\u79fb\u52a8\u603b\u548c\u7b49\u3002</p>"},{"location":"code/time_series/#_5","title":"\u57fa\u672c\u6982\u5ff5","text":"<p><code>rolling</code> \u51fd\u6570\u5141\u8bb8\u4f60\u5b9a\u4e49\u4e00\u4e2a\u7a97\u53e3\uff08\u5373\u89c2\u5bdf\u7684\u884c\u6570\uff09\uff0c\u5e76\u5728\u8fd9\u4e2a\u7a97\u53e3\u5185\u8fdb\u884c\u805a\u5408\u6216\u8ba1\u7b97\u3002\u7a97\u53e3\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u6839\u636e\u65f6\u95f4\u6233\u52a8\u6001\u8c03\u6574\u7684\u3002</p>"},{"location":"code/time_series/#_6","title":"\u57fa\u672c\u8bed\u6cd5","text":"<pre><code>DataFrame.rolling(window, min_periods=1, center=False, win_type=None, on=None, axis=0, method='single')\n</code></pre>"},{"location":"code/time_series/#_7","title":"\u4e3b\u8981\u53c2\u6570\u8bf4\u660e","text":"<ol> <li> <p>window\uff1a\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u6307\u5b9a\u8981\u8003\u8651\u7684\u89c2\u5bdf\u503c\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u662f\u6574\u6570\uff08\u8868\u793a\u56fa\u5b9a\u6570\u91cf\u7684\u884c\uff09\u6216\u65f6\u95f4\u5b57\u7b26\u4e32\uff08\u5982 <code>'5D'</code> \u8868\u793a\u8fc7\u53bb 5 \u5929\uff09\u3002</p> </li> <li> <p>min_periods\uff1a\u7a97\u53e3\u5185\u9700\u8981\u7684\u6700\u5c0f\u975e\u7a7a\u89c2\u6d4b\u503c\u6570\uff0c\u9ed8\u8ba4\u4e3a 1\u3002\u5982\u679c\u7a97\u53e3\u5185\u7684\u6709\u6548\u89c2\u6d4b\u503c\u5c11\u4e8e\u8fd9\u4e2a\u6570\uff0c\u5c06\u8fd4\u56de <code>NaN</code>\u3002</p> </li> <li> <p>center\uff1a\u5e03\u5c14\u503c\uff0c\u6307\u5b9a\u7a97\u53e3\u662f\u5426\u5c45\u4e2d\u3002\u5982\u679c\u4e3a <code>True</code>\uff0c\u7a97\u53e3\u5c06\u4ee5\u5f53\u524d\u884c\u4f5c\u4e3a\u4e2d\u5fc3\uff1b\u5982\u679c\u4e3a <code>False</code>\uff08\u9ed8\u8ba4\uff09\uff0c\u7a97\u53e3\u5411\u53f3\u5bf9\u9f50\u3002</p> </li> <li> <p>win_type\uff1a\u7a97\u53e3\u7c7b\u578b\uff0c\u6307\u5b9a\u7a97\u53e3\u7684\u6743\u91cd\uff08\u5982 <code>boxcar</code>\u3001<code>triang</code>\u3001<code>blackman</code> \u7b49\uff09\u3002</p> </li> <li> <p>on\uff1a\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u5217\uff0c\u9ed8\u8ba4\u4e3a <code>None</code>\u3002</p> </li> <li> <p>axis\uff1a\u7528\u4e8e\u6307\u5b9a\u6eda\u52a8\u64cd\u4f5c\u7684\u8f74\uff0c\u9ed8\u8ba4\u4e3a 0\uff08\u884c\uff09\u3002</p> </li> <li> <p>method\uff1a\u6307\u5b9a\u7a97\u53e3\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u9ed8\u8ba4\u4e3a <code>'single'</code>\uff08\u5355\u6b21\u8ba1\u7b97\uff09\u3002</p> </li> </ol>"},{"location":"code/time_series/#_8","title":"\u793a\u4f8b","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff1a</p> <pre><code>import pandas as pd\n\n# \u521b\u5efa\u65f6\u95f4\u5e8f\u5217\u6570\u636e\ndata = {\n    'date': pd.date_range(start='2023-01-01', periods=10),\n    'value': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n}\n\ndf = pd.DataFrame(data).set_index('date')\nprint(df)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>            value\ndate             \n2023-01-01     10\n2023-01-02     20\n2023-01-03     30\n2023-01-04     40\n2023-01-05     50\n2023-01-06     60\n2023-01-07     70\n2023-01-08     80\n2023-01-09     90\n2023-01-10    100\n</code></pre>"},{"location":"code/time_series/#1_1","title":"1. \u8ba1\u7b97\u79fb\u52a8\u5e73\u5747","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>rolling</code> \u6765\u8ba1\u7b97 3 \u5929\u7684\u79fb\u52a8\u5e73\u5747\uff1a</p> <pre><code>rolling_mean = df['value'].rolling(window=3).mean()\nprint(rolling_mean)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>date\n2023-01-01     NaN\n2023-01-02     NaN\n2023-01-03    20.0\n2023-01-04    30.0\n2023-01-05    40.0\n2023-01-06    50.0\n2023-01-07    60.0\n2023-01-08    70.0\n2023-01-09    80.0\n2023-01-10    90.0\nName: value, dtype: float64\n</code></pre> <p>\u524d\u4e24\u5929\u7684\u7ed3\u679c\u4e3a <code>NaN</code>\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u6570\u636e\u6765\u8ba1\u7b97\u79fb\u52a8\u5e73\u5747\u3002</p>"},{"location":"code/time_series/#2_1","title":"2. \u8ba1\u7b97\u79fb\u52a8\u603b\u548c","text":"<p>\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 4 \u5929\u7684\u79fb\u52a8\u603b\u548c\uff1a</p> <pre><code>rolling_sum = df['value'].rolling(window=4).sum()\nprint(rolling_sum)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>date\n2023-01-01     NaN\n2023-01-02     NaN\n2023-01-03     NaN\n2023-01-04    100.0\n2023-01-05    140.0\n2023-01-06    180.0\n2023-01-07    220.0\n2023-01-08    260.0\n2023-01-09    300.0\n2023-01-10    340.0\nName: value, dtype: float64\n</code></pre>"},{"location":"code/time_series/#3-min_periods","title":"3. \u4f7f\u7528 <code>min_periods</code>","text":"<p>\u53ef\u4ee5\u8bbe\u7f6e <code>min_periods</code> \u53c2\u6570\u4ee5\u6539\u53d8\u8ba1\u7b97\u65f6\u9700\u8981\u7684\u6700\u5c0f\u89c2\u6d4b\u503c\u6570\u3002\u4f8b\u5982\uff0c\u8bbe\u5b9a <code>min_periods=1</code>\uff1a</p> <pre><code>rolling_mean_min = df['value'].rolling(window=3, min_periods=1).mean()\nprint(rolling_mean_min)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>date\n2023-01-01    10.0\n2023-01-02    15.0\n2023-01-03    20.0\n2023-01-04    30.0\n2023-01-05    40.0\n2023-01-06    50.0\n2023-01-07    60.0\n2023-01-08    70.0\n2023-01-09    80.0\n2023-01-10    90.0\nName: value, dtype: float64\n</code></pre>"},{"location":"code/time_series/#4-center","title":"4. \u4f7f\u7528 <code>center</code>","text":"<p>\u4f7f\u7528 <code>center=True</code> \u5c06\u7a97\u53e3\u5c45\u4e2d\u5bf9\u9f50\uff1a</p> <pre><code>rolling_mean_centered = df['value'].rolling(window=3, center=True).mean()\nprint(rolling_mean_centered)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>date\n2023-01-01    15.0\n2023-01-02    20.0\n2023-01-03    30.0\n2023-01-04    40.0\n2023-01-05    50.0\n2023-01-06    60.0\n2023-01-07    70.0\n2023-01-08    80.0\n2023-01-09    90.0\n2023-01-10    95.0\nName: value, dtype: float64\n</code></pre>"},{"location":"code/time_series/#5","title":"5. \u4f7f\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570","text":"<p>\u9664\u4e86 <code>mean</code> \u548c <code>sum</code>\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u805a\u5408\u51fd\u6570\uff0c\u4f8b\u5982\u8ba1\u7b97\u79fb\u52a8\u6807\u51c6\u5dee\uff1a</p> <pre><code>rolling_std = df['value'].rolling(window=3).std()\nprint(rolling_std)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>date\n2023-01-01     NaN\n2023-01-02     NaN\n2023-01-03    10.0\n2023-01-04    10.0\n2023-01-05    10.0\n2023-01-06    10.0\n2023-01-07    10.0\n2023-01-08    10.0\n2023-01-09    10.0\n2023-01-10    10.0\nName: value, dtype: float64\n</code></pre>"},{"location":"code/time_series/#6","title":"6. \u4f7f\u7528\u81ea\u5b9a\u4e49\u7a97\u53e3","text":"<p>\u53ef\u4ee5\u4f7f\u7528 <code>win_type</code> \u53c2\u6570\u5b9a\u4e49\u7a97\u53e3\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u4f7f\u7528\u6c49\u660e\u7a97\u53e3\uff08Hamming window\uff09\uff1a</p> <pre><code>rolling_hamming = df['value'].rolling(window=3, win_type='hamming').mean()\nprint(rolling_hamming)\n</code></pre>"},{"location":"code/time_series/#_9","title":"\u603b\u7ed3","text":"<p><code>rolling</code> \u51fd\u6570\u662f <code>pandas</code> \u4e2d\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\uff0c\u9002\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u548c\u6570\u636e\u6d41\u5206\u6790\u3002\u5b83\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u6eda\u52a8\u7a97\u53e3\u7684\u805a\u5408\u8ba1\u7b97\uff0c\u5e2e\u52a9\u7528\u6237\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u52a8\u6001\u53d8\u5316\u548c\u8d8b\u52bf\u3002\u901a\u8fc7\u8bbe\u7f6e\u4e0d\u540c\u7684\u7a97\u53e3\u5927\u5c0f\u3001\u805a\u5408\u51fd\u6570\u548c\u53c2\u6570\uff0c\u53ef\u4ee5\u7075\u6d3b\u5730\u6ee1\u8db3\u4e0d\u540c\u7684\u5206\u6790\u9700\u6c42\u3002</p>"},{"location":"code/%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B/","title":"\u6269\u6563\u6a21\u578b","text":"<p>\u6269\u6563\u6a21\u578bMLAPP</p> <p>\u7efc\u8ff0</p>"},{"location":"xiaolv/","title":"\u6548\u7387 :","text":"<p>\u6211\u7684\u6548\u7387\u5c31\u662f\u6ca1\u6709\u6548\u7387</p>"}]}